// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task_repo.sql

package task_repo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSubtask = `-- name: CreateSubtask :exec
INSERT INTO subtasks
	(id, task_id, name, done)
VALUES ($1, $2, $3, $4)
`

type CreateSubtaskParams struct {
	ID     uuid.UUID
	TaskID uuid.UUID
	Name   string
	Done   bool
}

func (q *Queries) CreateSubtask(ctx context.Context, arg CreateSubtaskParams) error {
	_, err := q.db.Exec(ctx, createSubtask,
		arg.ID,
		arg.TaskID,
		arg.Name,
		arg.Done,
	)
	return err
}

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks
	(id, name, status, created_by, created_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateTaskParams struct {
	ID        uuid.UUID
	Name      string
	Status    int32
	CreatedBy uuid.UUID
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.Exec(ctx, createTask,
		arg.ID,
		arg.Name,
		arg.Status,
		arg.CreatedBy,
		arg.CreatedAt,
	)
	return err
}

const deleteSubtask = `-- name: DeleteSubtask :exec
DELETE FROM subtasks WHERE id = $1
`

func (q *Queries) DeleteSubtask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSubtask, id)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT
	tasks.id, tasks.name, tasks.description, tasks.status, tasks.public, tasks.created_by, tasks.due_at, tasks.created_at,
	subtasks.id as subtask_id,
	subtasks.name as subtasks_name,
	subtasks.done as subtasks_done
FROM tasks
LEFT JOIN subtasks ON subtasks.task_id = tasks.id
`

type GetAllTasksRow struct {
	Task         Task
	SubtaskID    uuid.NullUUID
	SubtasksName *string
	SubtasksDone *bool
}

func (q *Queries) GetAllTasks(ctx context.Context) ([]GetAllTasksRow, error) {
	rows, err := q.db.Query(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllTasksRow{}
	for rows.Next() {
		var i GetAllTasksRow
		if err := rows.Scan(
			&i.Task.ID,
			&i.Task.Name,
			&i.Task.Description,
			&i.Task.Status,
			&i.Task.Public,
			&i.Task.CreatedBy,
			&i.Task.DueAt,
			&i.Task.CreatedAt,
			&i.SubtaskID,
			&i.SubtasksName,
			&i.SubtasksDone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTaskDueAt = `-- name: RemoveTaskDueAt :exec
UPDATE tasks
SET due_at = NULL
WHERE id = $1
`

func (q *Queries) RemoveTaskDueAt(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeTaskDueAt, id)
	return err
}

const updateSubtask = `-- name: UpdateSubtask :exec
UPDATE subtasks
SET name = coalesce($1, name),
    done = coalesce($2, done)
WHERE id = $3
`

type UpdateSubtaskParams struct {
	Name *string
	Done *bool
	ID   uuid.UUID
}

func (q *Queries) UpdateSubtask(ctx context.Context, arg UpdateSubtaskParams) error {
	_, err := q.db.Exec(ctx, updateSubtask, arg.Name, arg.Done, arg.ID)
	return err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET name = coalesce($2, name),
	description = coalesce($3, description),
	status = coalesce($4, status),
	public = coalesce($5, public),
	created_by = coalesce($6, created_by),
	due_at = coalesce($7, due_at)
WHERE id = $1
`

type UpdateTaskParams struct {
	ID          uuid.UUID
	Name        *string
	Description *string
	Status      *int32
	Public      *bool
	CreatedBy   uuid.NullUUID
	DueAt       pgtype.Timestamp
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.Exec(ctx, updateTask,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.Public,
		arg.CreatedBy,
		arg.DueAt,
	)
	return err
}
